/data_200t/soft/R/R-3.6.0/bin/R 

###########求积距项函数##############
MDIF<-function(data,EDGE){
  X<-(data[,EDGE[1]]-mean(data[,EDGE[1]]))*(data[,EDGE[2]]-mean(data[,EDGE[2]]))
  X
}

###########求KDE##################
library(KernSmooth)
library(akima)
# denPre2D 
denPre2D<- function(edge,DataPre,method=c("integers","bandwidth")[2]){
  x <- DataPre[,edge[1]]
  y <- DataPre[,edge[2]]
  N <- max(c(x,y))
  
  Width <- c(bw.nrd0(x),bw.nrd0(y))
  
  gridSize <- switch(method,
                     integers  = c(N, N),
                     bandwidth = ceiling(N / c(min(Width[1]),min(Width[2]))))
  gridSize <- pmax(gridSize,10) # make sure there are at least 100 points in total
  
  #Compute a 2D Binned Kernel Density Estimate
  
  BSmooth <- bkde2D(x=cbind(x, y), bandwidth=Width, gridsize=gridSize)

  #Compute a Binned Kernel Density Estimate
  USmoothx<-bkde(x)
  USmoothy<-bkde(y)

  BPre <- bicubic(x=BSmooth$x1, y=BSmooth$x2, z=BSmooth$fhat, x0=x,y0=y)
  UPrex <-aspline(USmoothx$x,USmoothx$y,x)
  UPrey <-aspline(USmoothy$x,USmoothy$y,y)
  # make sure there are no zeros in the smooth function (since we will take a log of that)
  BPre$z<- pmax(BPre$z, 1e-10)
  UPrex$y<-pmax(UPrex$y, 1e-10)
  UPrey$y<-pmax(UPrey$y, 1e-10)
  
  denpre <- log(BPre$z/(UPrex$y*UPrey$y))
  denpre
}
#############P_VALUE###################
P_VALUE<-function(p){
  p<-rbinom(1,1,p)
  p
}
#############RENAME###################
RENAME<-function(varname,EDGE){
  a<-paste0(varname,EDGE[1],"_",EDGE[2])
  a
}
#---------------节点重命名代码--------------
RENAME_node<-function(varname,node){
  a<-paste0(varname,node)
  a
}

###########数据################
library(data.table)

 a<-read.csv("/data_50t/zhangliye/jinxiuyuan/network/data_ing/gene/application/hsa04925/network_hsa04925.csv",header = FALSE)
 b<-unlist(a)
 sigma<-matrix(b,nrow = 13)
 sigma0<-sigma
 sigma0[lower.tri(sigma0,diag=T)]<- 0
 EDGE <- which(sigma0!=0,arr.ind=T)

#gene <- fread(paste0("/data_50t/zhangliye/jinxiuyuan/network/data_ing/gene/application/hsa04925/DPR/hsa04925_gene_scale.txt"),header=T)
gene <- fread(paste0("/data_50t/zhangliye/jinxiuyuan/network/data_ing/gene/application/hsa04925/BSLMM/hsa04925_gene_scale.txt"),header=T)
PC<-fread(paste0("/data_50t/zhangliye/data/SEXandPC_337129.txt"), header=T)
DBPSBP <- fread("/data_50t/zhangliye/zhangliye/network/data_ing/result/DBPSBP/DBPSBP487409.txt",header=F)
colnames(DBPSBP) <- c("eid","dbp","sbp")
 rname <- NULL
  for (i in 1:dim(DBPSBP)[1]){
   rname[i] <- i
  }

DBPSBP <- as.data.frame(DBPSBP)
rownames(DBPSBP) <- rname
outcome <-t(subset(t(DBPSBP),select=colnames(gene)))
outcome <- as.data.frame(outcome)


y <- within(outcome,{  
  dbp[dbp <90] <- 0 
  dbp[dbp >= 90] <- 1
  sbp[sbp<140] <- 0 
  sbp[sbp >=140] <- 1})
x <- c(2,3)
for (i in x){
  y[,i] <- factor(y[,i], 
                     levels=c(0,1), 
                     labels=c("No","Yes"))
}



index1<-which(PC$eid %in% colnames(gene))
PC <- as.data.frame(PC)
PC<-PC[index1,]
PC[,1] <- factor(PC[,1], 
    levels=c(0,1), 
    labels=c("female","male"))


DataSet <- t(gene)
colname_node<-apply(matrix(1:ncol(DataSet)),1,RENAME_node,varname="X")
colnames(DataSet)<-colname_node


DataSet<-data.frame(DataSet,y)
DataSet<-cbind(DataSet,PC)
write.table(DataSet,paste0("/data_50t/zhangliye/zhangliye/network/data_ing/result/DBPSBP/hsa04925/bslmm_dataset.txt"), quote=F,col.names=T,row.names=F)

######################KDE######################
    DenPreData <- apply(EDGE,1,denPre2D,DataPre=DataSet)
    colname<-apply(EDGE,1,RENAME,varname="V")
    colnames(DenPreData)<-colname
    KDEFitData<-cbind(DataSet,DenPreData)
    KDEFitData<-data.frame(KDEFitData)
    
#####################积距项########################
    MDIPreData<-apply(EDGE,1,MDIF,data=DataSet)
    colname<-apply(EDGE,1,RENAME,varname="V")
    colnames(MDIPreData)<-colname
    MDIFitData<-cbind(DataSet,MDIPreData)
    MDIFitData<-data.frame(MDIFitData)

####dbp#####
#################拟合点和边################################
KDEfit_node_edge<-glm(dbp~X1+X2+X3+X4+X5+X6+X7+X8+X9+X10+X11+X12+X13+V1_2+V2_3+V2_4+V4_5+V3_8+V8_9+V2_10+V5_10+V9_10+V10_11,data=KDEFitData,family = binomial(link = "logit"),control = list(maxit=100))    
MDIfit_node_edge<-glm(dbp~X1+X2+X3+X4+X5+X6+X7+X8+X9+X10+X11+X12+X13+V1_2+V2_3+V2_4+V4_5+V3_8+V8_9+V2_10+V5_10+V9_10+V10_11, data=MDIFitData,family = binomial(link = "logit"),control = list(maxit=100))

KDEtemp_node_edge<-summary(KDEfit_node_edge)
KDEtem_node_edge<-KDEtemp_node_edge$coefficients

MDItemp_node_edge<-summary(MDIfit_node_edge)
MDItem_node_edge<-MDItemp_node_edge$coefficients
#################拟合点################################
KDEfit_node<-glm(dbp~X1+X2+X3+X4+X5+X6+X7+X8+X9+X10+X11+X12+X13,data=KDEFitData,family = binomial(link = "logit"),control = list(maxit=100))
MDIfit_node<-glm(dbp~X1+X2+X3+X4+X5+X6+X7+X8+X9+X10+X11+X12+X13, data=MDIFitData,family = binomial(link = "logit"),control = list(maxit=100))

KDEtemp_node<-summary(KDEfit_node)
KDEtem_node<-KDEtemp_node$coefficients

MDItemp_node<-summary(MDIfit_node)
MDItem_node<-MDItemp_node$coefficients
#################拟合边################################
KDEfit_edge<-glm(dbp~V1_2+V2_3+V2_4+V4_5+V3_8+V8_9+V2_10+V5_10+V9_10+V10_11,data=KDEFitData,family = binomial(link = "logit"),control = list(maxit=100))
MDIfit_edge<-glm(dbp~V1_2+V2_3+V2_4+V4_5+V3_8+V8_9+V2_10+V5_10+V9_10+V10_11, data=MDIFitData,family = binomial(link = "logit"),control = list(maxit=100))


KDEtemp_edge<-summary(KDEfit_edge)
KDEtem_edge<-KDEtemp_edge$coefficients

MDItemp_edge<-summary(MDIfit_edge)
MDItem_edge<-MDItemp_edge$coefficients

library(openxlsx)
sheets = list("KDEnode&edge" = KDEtem_node_edge,"MDInode&edge" = MDItem_node_edge,"KDEnode" = KDEtem_node,"MDInode" = MDItem_node,"KDEedge" = KDEtem_edge,"MDIedge" = MDItem_edge)
write.xlsx(sheets,"/data_50t/zhangliye/zhangliye/network/data_ing/result/DBPSBP/hsa04925/nocov/bslmm_dbp.xlsx")

####sbp#####
#################拟合点和边################################
KDEfit_node_edge<-glm(sbp~X1+X2+X3+X4+X5+X6+X7+X8+X9+X10+X11+X12+X13+V1_2+V2_3+V2_4+V4_5+V3_8+V8_9+V2_10+V5_10+V9_10+V10_11,data=KDEFitData,family = binomial(link = "logit"),control = list(maxit=100))    
MDIfit_node_edge<-glm(sbp~X1+X2+X3+X4+X5+X6+X7+X8+X9+X10+X11+X12+X13+V1_2+V2_3+V2_4+V4_5+V3_8+V8_9+V2_10+V5_10+V9_10+V10_11, data=MDIFitData,family = binomial(link = "logit"),control = list(maxit=100))

KDEtemp_node_edge<-summary(KDEfit_node_edge)
KDEtem_node_edge<-KDEtemp_node_edge$coefficients

MDItemp_node_edge<-summary(MDIfit_node_edge)
MDItem_node_edge<-MDItemp_node_edge$coefficients
#################拟合点################################
KDEfit_node<-glm(sbp~X1+X2+X3+X4+X5+X6+X7+X8+X9+X10+X11+X12+X13,data=KDEFitData,family = binomial(link = "logit"),control = list(maxit=100))
MDIfit_node<-glm(sbp~X1+X2+X3+X4+X5+X6+X7+X8+X9+X10+X11+X12+X13, data=MDIFitData,family = binomial(link = "logit"),control = list(maxit=100))

KDEtemp_node<-summary(KDEfit_node)
KDEtem_node<-KDEtemp_node$coefficients

MDItemp_node<-summary(MDIfit_node)
MDItem_node<-MDItemp_node$coefficients
#################拟合边################################
KDEfit_edge<-glm(sbp~V1_2+V2_3+V2_4+V4_5+V3_8+V8_9+V2_10+V5_10+V9_10+V10_11,data=KDEFitData,family = binomial(link = "logit"),control = list(maxit=100))
MDIfit_edge<-glm(sbp~V1_2+V2_3+V2_4+V4_5+V3_8+V8_9+V2_10+V5_10+V9_10+V10_11, data=MDIFitData,family = binomial(link = "logit"),control = list(maxit=100))


KDEtemp_edge<-summary(KDEfit_edge)
KDEtem_edge<-KDEtemp_edge$coefficients

MDItemp_edge<-summary(MDIfit_edge)
MDItem_edge<-MDItemp_edge$coefficients

library(openxlsx)
sheets = list("KDEnode&edge" = KDEtem_node_edge,"MDInode&edge" = MDItem_node_edge,"KDEnode" = KDEtem_node,"MDInode" = MDItem_node,"KDEedge" = KDEtem_edge,"MDIedge" = MDItem_edge)
write.xlsx(sheets,"/data_50t/zhangliye/zhangliye/network/data_ing/result/DBPSBP/hsa04925/nocov/bslmm_sbp.xlsx")






